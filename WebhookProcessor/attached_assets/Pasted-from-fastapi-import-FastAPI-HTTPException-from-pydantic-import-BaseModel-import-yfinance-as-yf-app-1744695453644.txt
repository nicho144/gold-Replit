from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import yfinance as yf

app = FastAPI()

# Define the input model for receiving market data inputs
class MarketInput(BaseModel):
    ticker_front: str  # e.g., "GC=F" for Gold Front Month
    ticker_next: str   # e.g., "GCM24.CMX" for next month
    physical_demand: str  # "declining", "stable", "rising"
    price_breakout: bool  # Has price broken resistance?

# Fallback function for getting price data
def get_price(ticker):
    """Attempts to retrieve the market price for a given ticker, with a fallback."""
    try:
        # Fetch data from Yahoo Finance
        data = yf.Ticker(ticker).info
        price = data.get("regularMarketPrice", None)
        if price is None:
            raise ValueError(f"Price data for ticker {ticker} is unavailable.")
        return price
    except Exception as e:
        # If data fetching fails, log the error and return a default price
        print(f"Error retrieving {ticker}: {str(e)}. Using fallback price.")
        return 1000  # Default fallback price (e.g., $1000 for Gold)

@app.post("/analyze")
def analyze_market(input: MarketInput):
    try:
        # Fetch market data for front and next contracts using fallback mechanism
        front_price = get_price(input.ticker_front)
        next_price = get_price(input.ticker_next)

        # Analyze the price difference (Contango Slope)
        contango_slope = "steep_upward" if next_price - front_price > 5 else "mild"

        # For simplicity, mock the open interest change as "spike"
        open_interest_change = "spike"

        # Signal analysis based on the conditions
        signal = "NEUTRAL"
        reasons = []
        recommendations = []

        # Applying conditions to determine the market signal
        if contango_slope == "steep_upward" and \
           open_interest_change == "spike" and \
           not input.price_breakout and \
           input.physical_demand == "declining":
            signal = "BEARISH — Potential exhaustion"
            reasons = [
                f"Contango widened: {next_price:.2f} > {front_price:.2f}",
                "Open interest spike (mocked)",
                "Price stalling",
                "Physical demand declining"
            ]
            recommendations = [
                "Reduce long exposure in GLD or futures",
                "Consider bear spreads or cash",
                "Watch roll yield drag on GLD/ETFs"
            ]
        else:
            signal = "NEUTRAL or BULLISH — No exhaustion confirmed"
            recommendations = ["Continue monitoring term structure and demand."]

        return {
            "signal": signal,
            "reasons": reasons,
            "recommendations": recommendations,
            "prices": {
                "front_contract": front_price,
                "next_contract": next_price
            }
        }

    except ValueError as e:
        # If any issue occurs, raise an HTTP error with details
        raise HTTPException(status_code=400, detail=str(e))
